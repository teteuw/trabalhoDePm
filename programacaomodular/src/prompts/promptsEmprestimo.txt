Iteração 1:
Primeramente, crie uma classe Emprestimo em java que extende a interface Multa, implementando o método calcularMulta(), 
a cada dia atrasado a multa será adicionado um real de multa. O valor da multa não pode passar do valor do livro vezes 1,5. 
Além disso, a classe Empréstimo deverá ter a instância de Livro livro, de Usuario usuario, data de empréstimo, data de devolução, 
e o status devolvido, cada método deverá ter seus getters and setters().

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class Emprestimo implements Multa {
    private Livro livro;
    private Usuario usuario;
    private LocalDate dataEmprestimo;
    private LocalDate dataDevolucao;
    private boolean devolvido; // true = devolvido, false = ainda emprestado

    // Construtor
    public Emprestimo(Livro livro, Usuario usuario, LocalDate dataEmprestimo, LocalDate dataDevolucao) {
        this.livro = livro;
        this.usuario = usuario;
        this.dataEmprestimo = dataEmprestimo;
        this.dataDevolucao = dataDevolucao;
        this.devolvido = false; // Inicia como não devolvido
    }

    // Getters e Setters
    public Livro getLivro() {
        return livro;
    }

    public void setLivro(Livro livro) {
        this.livro = livro;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    public LocalDate getDataEmprestimo() {
        return dataEmprestimo;
    }

    public void setDataEmprestimo(LocalDate dataEmprestimo) {
        this.dataEmprestimo = dataEmprestimo;
    }

    public LocalDate getDataDevolucao() {
        return dataDevolucao;
    }

    public void setDataDevolucao(LocalDate dataDevolucao) {
        this.dataDevolucao = dataDevolucao;
    }

    public boolean isDevolvido() {
        return devolvido;
    }

    public void setDevolvido(boolean devolvido) {
        this.devolvido = devolvido;
    }

    // Implementação do método calcularMulta
    @Override
    public double calcularMulta(int diasAtrasados) {
        if (diasAtrasados <= 0) {
            return 0.0; // Sem multa se não houver atraso
        }

        double multa = diasAtrasados * 1.0; // R$ 1,00 por dia de atraso
        double valorMaximoMulta = livro.getValor() * 1.5; // Multa máxima = valor do livro * 1.5

        return Math.min(multa, valorMaximoMulta); // Garante que a multa não exceda o limite
    }

    // Método para calcular o número de dias de atraso
    public int calcularDiasAtraso() {
        if (LocalDate.now().isAfter(dataDevolucao)) {
            return (int) ChronoUnit.DAYS.between(dataDevolucao, LocalDate.now());
        }
        return 0; // Sem atraso se a data atual for antes ou igual à data de devolução
    }

    // Método para finalizar o empréstimo (devolução)
    public void devolver() {
        if (devolvido) {
            throw new IllegalStateException("Erro: O empréstimo já foi finalizado.");
        }
        this.devolvido = true;
        livro.setStatus(true); // Marca o livro como disponível
        System.out.println("Livro devolvido com sucesso.");
    }
}

CalcularDiasAtraso não deveria ser originalmente de problema, poderia ser da interface Multa.

Iteração 2:

Com prioridade por favor, crie a classe Emprestimo que extende Multa, com os atributos Livro Usuario dataEmprestimo, dataDevolucao. Além disso adicione um Id empréstimo Long, para ser possível de indentificar de forma mais coesa o empréstimo.
O construtor deverá utilizar os setters.
Os métodos deverão compor os getters and setters de cada atributo. Além dos métodos devolver() que, se o livro já foi devolvido ele retorna uma mensagem dizendo que o empréstimo já foi finalizado, caso contrário ele coloca seta o status do livro como true. Por último, a classe deve sobrescrever os métodos
    public double calcularMulta(int diasAtrasados) {
        if (diasAtrasados <= 0) {
            return 0.0; // Sem multa se não houver atraso
        }

        double multa = diasAtrasados * 1.0; // R$ 1,00 por dia de atraso
        double valorMaximoMulta = livro.getValor() * 1.5; // Multa máxima = valor do livro * 1.5

        return Math.min(multa, valorMaximoMulta); // Garante que a multa não exceda o limite
    }
E o método 
public int calcularDiasAtraso() {
        if (LocalDate.now().isAfter(dataDevolucao)) {
            return (int) ChronoUnit.DAYS.between(dataDevolucao, LocalDate.now());
        }
        return 0; // Sem atraso se a data atual for antes ou igual à data de devolução
    }






import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class Emprestimo implements Multa {

    private Long idEmprestimo; // Identificador único do empréstimo
    private Livro livro; // Referência ao livro emprestado
    private Usuario usuario; // Referência ao usuário que realizou o empréstimo
    private LocalDate dataEmprestimo; // Data em que o empréstimo foi realizado
    private LocalDate dataDevolucao; // Data em que a devolução é esperada
    private boolean devolvido; // Status do empréstimo

    // Construtor utilizando os setters
    public Emprestimo(Long idEmprestimo, Livro livro, Usuario usuario, LocalDate dataEmprestimo, LocalDate dataDevolucao) {
        setIdEmprestimo(idEmprestimo);
        setLivro(livro);
        setUsuario(usuario);
        setDataEmprestimo(dataEmprestimo);
        setDataDevolucao(dataDevolucao);
        setDevolvido(false); // Inicialmente, o empréstimo não está devolvido
    }

    // Getters e Setters
    public Long getIdEmprestimo() {
        return idEmprestimo;
    }

    public void setIdEmprestimo(Long idEmprestimo) {
        if (idEmprestimo == null || idEmprestimo <= 0) {
            throw new IllegalArgumentException("O ID do empréstimo deve ser um número positivo e válido.");
        }
        this.idEmprestimo = idEmprestimo;
    }

    public Livro getLivro() {
        return livro;
    }

    public void setLivro(Livro livro) {
        if (livro == null) {
            throw new IllegalArgumentException("Livro não pode ser nulo.");
        }
        this.livro = livro;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        if (usuario == null) {
            throw new IllegalArgumentException("Usuário não pode ser nulo.");
        }
        this.usuario = usuario;
    }

    public LocalDate getDataEmprestimo() {
        return dataEmprestimo;
    }

    public void setDataEmprestimo(LocalDate dataEmprestimo) {
        if (dataEmprestimo == null || dataEmprestimo.isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("Data de empréstimo inválida.");
        }
        this.dataEmprestimo = dataEmprestimo;
    }

    public LocalDate getDataDevolucao() {
        return dataDevolucao;
    }

    public void setDataDevolucao(LocalDate dataDevolucao) {
        if (dataDevolucao == null || dataDevolucao.isBefore(dataEmprestimo)) {
            throw new IllegalArgumentException("Data de devolução inválida.");
        }
        this.dataDevolucao = dataDevolucao;
    }

    public boolean isDevolvido() {
        return devolvido;
    }

    public void setDevolvido(boolean devolvido) {
        this.devolvido = devolvido;
    }

    // Método para devolver o livro
    public void devolver() {
        if (devolvido) {
            System.out.println("O empréstimo já foi finalizado.");
        } else {
            setDevolvido(true);
            livro.setStatus(true); // Marca o livro como disponível
            System.out.println("Livro devolvido com sucesso.");
        }
    }

    // Sobrescrita do método calcularMulta
    @Override
    public double calcularMulta(int diasAtrasados) {
        if (diasAtrasados <= 0) {
            return 0.0; // Sem multa se não houver atraso
        }

        double multa = diasAtrasados * 1.0; // R$ 1,00 por dia de atraso
        double valorMaximoMulta = livro.getValor() * 1.5; // Multa máxima = valor do livro * 1.5

        return Math.min(multa, valorMaximoMulta); // Garante que a multa não exceda o limite
    }

    // Sobrescrita do método calcularDiasAtraso
    @Override
    public int calcularDiasAtraso() {
        if (LocalDate.now().isAfter(dataDevolucao)) {
            return (int) ChronoUnit.DAYS.between(dataDevolucao, LocalDate.now());
        }
        return 0; // Sem atraso se a data atual for antes ou igual à data de devolução
    }
}
Atributo devolvido não é necessário.

Iteração 3:
Na classe emprestimo, o atributo devolvido é realmente necessário? 
porque se já existe um atributo status na classe livro e ela usa uma referência Livro, 
e dentro dela já tem o status disponível ou não. Está certo?

public class Emprestimo implements Multa {
    private Long idEmprestimo;
    private Livro livro;
    private Usuario usuario;
    private LocalDate dataEmprestimo;
    private LocalDate dataDevolucao;

    // Construtor
    public Emprestimo(Long idEmprestimo, Livro livro, Usuario usuario, LocalDate dataEmprestimo, LocalDate dataDevolucao) {
        setIdEmprestimo(idEmprestimo);
        setLivro(livro);
        setUsuario(usuario);
        setDataEmprestimo(dataEmprestimo);
        setDataDevolucao(dataDevolucao);
    }

    // Getters e setters
    public Long getIdEmprestimo() {
        return idEmprestimo;
    }

    public void setIdEmprestimo(Long idEmprestimo) {
        this.idEmprestimo = idEmprestimo;
    }

    public Livro getLivro() {
        return livro;
    }

    public void setLivro(Livro livro) {
        this.livro = livro;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    public LocalDate getDataEmprestimo() {
        return dataEmprestimo;
    }

    public void setDataEmprestimo(LocalDate dataEmprestimo) {
        this.dataEmprestimo = dataEmprestimo;
    }

    public LocalDate getDataDevolucao() {
        return dataDevolucao;
    }

    public void setDataDevolucao(LocalDate dataDevolucao) {
        this.dataDevolucao = dataDevolucao;
    }

    // Método devolver
    public void devolver() {
        if (livro.isStatus()) { // Livro já está disponível
            System.out.println("Este empréstimo já foi finalizado.");
        } else {
            livro.setStatus(true); // Marca o livro como disponível
            System.out.println("Livro devolvido com sucesso.");
        }
    }

    // Sobrescrever os métodos da interface Multa
    @Override
    public double calcularMulta(int diasAtrasados) {
        if (diasAtrasados <= 0) {
            return 0.0; // Sem multa
        }

        double multa = diasAtrasados * 1.0; // R$ 1,00 por dia de atraso
        double valorMaximoMulta = livro.getValor() * 1.5; // Multa máxima = valor do livro * 1.5

        return Math.min(multa, valorMaximoMulta); // Garante que a multa não exceda o limite
    }

    @Override
    public int calcularDiasAtraso() {
        if (LocalDate.now().isAfter(dataDevolucao)) {
            return (int) ChronoUnit.DAYS.between(dataDevolucao, LocalDate.now());
        }
        return 0; // Sem atraso
    }
}



